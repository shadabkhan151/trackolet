plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0-M1'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.google.protobuf" version "0.9.4"
	id "checkstyle"
	id "org.kordamp.gradle.project-enforcer" version "0.13.0"
}

group = 'com.trackolet'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
	compileJava.options.encoding = "UTF-8"
	jar.destinationDirectory = file("$projectDir/target")
}

enforce {
	rule(enforcer.rules.EnforceBytecodeVersion) { r ->
		r.maxJdkVersion = "21"
	}
}

checkstyle {
	toolVersion = "10.12.5"
    configFile = "gradle/checkstyle.xml" as File
	checkstyleTest.enabled = false
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "2023.0.0")
	guiceVersion = "7.0.0"
	jettyVersion = "11.0.19"
	jerseyVersion = "3.1.5"
	jacksonVersion = "2.15.3" // same version as jersey-media-json-jackson dependency
	protobufVersion = "3.25.2"
	jxlsVersion = "2.14.0"
	junitVersion = "5.10.1"
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:$protobufVersion"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.liquibase:liquibase-core'
	//implementation 'org.springframework.cloud:spring-cloud-starter-zookeeper-config'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testImplementation 'org.springframework.security:spring-security-test'
	// from traccar
	implementation "commons-codec:commons-codec:1.16.0"
	implementation "com.h2database:h2:2.2.224"
	implementation "com.mysql:mysql-connector-j:8.2.0"
	implementation "org.mariadb.jdbc:mariadb-java-client:3.3.2"
	implementation "org.postgresql:postgresql:42.7.1"
	implementation "com.microsoft.sqlserver:mssql-jdbc:12.4.2.jre11"
	implementation "com.zaxxer:HikariCP:5.1.0"
	implementation "io.netty:netty-all:4.1.104.Final"
//	implementation "org.slf4j:slf4j-jdk14:2.0.11"
	implementation "com.google.inject:guice:$guiceVersion"
	implementation "com.google.inject.extensions:guice-servlet:$guiceVersion"
	implementation "org.owasp.encoder:encoder:1.2.3"
	implementation "org.glassfish:jakarta.json:2.0.1"
	implementation "com.sun.mail:jakarta.mail:2.0.1"
	implementation "org.eclipse.jetty:jetty-server:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-servlets:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-webapp:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-jndi:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-proxy:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-util:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-security:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-xml:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-client:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-http:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-io:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-alpn-client:$jettyVersion"
	implementation "org.eclipse.jetty.websocket:websocket-jetty-server:$jettyVersion"
	implementation "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
	implementation "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
	implementation "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
	implementation "org.glassfish.hk2:guice-bridge:3.0.5" // same version as jersey-hk2
	implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jakarta-jsonp:$jacksonVersion"
	implementation "org.liquibase:liquibase-core:4.23.2" // upgrade has issues
	implementation "org.apache.commons:commons-jexl3:3.3"
	implementation "org.jxls:jxls:$jxlsVersion"
	implementation "org.jxls:jxls-poi:$jxlsVersion"
	implementation "org.apache.velocity:velocity-engine-core:2.3"
	implementation "org.apache.velocity.tools:velocity-tools-generic:3.1"
	implementation "org.apache.commons:commons-collections4:4.4"
	implementation "org.mnode.ical4j:ical4j:3.2.14"
	implementation "org.locationtech.spatial4j:spatial4j:0.8"
	implementation "org.locationtech.jts:jts-core:1.19.0"
	implementation "net.java.dev.jna:jna-platform:5.14.0"
	implementation "com.github.jnr:jnr-posix:3.1.18"
	implementation "com.google.protobuf:protobuf-java:$protobufVersion"
	implementation "com.amazonaws:aws-java-sdk-sns:1.12.636"
	implementation "org.apache.kafka:kafka-clients:3.6.1"
	implementation "com.hivemq:hivemq-mqtt-client:1.3.3"
	implementation "redis.clients:jedis:5.1.0"
	implementation "com.google.firebase:firebase-admin:9.2.0"
	implementation "com.nimbusds:oauth2-oidc-sdk:11.9.1"
	implementation "com.rabbitmq:amqp-client:5.20.0"
	implementation "com.warrenstrange:googleauth:1.5.0"
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
	testImplementation "org.mockito:mockito-core:5.8.0"
}

//compile("org.springframework.boot:spring-boot-starter-security"){
//	exclude module: "spring-boot-starter-logging"
//	exclude module: "logback-classic"
//}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

task copyDependencies(type: Copy) {
	into "$projectDir/target/lib"
	from configurations.runtimeClasspath
}
